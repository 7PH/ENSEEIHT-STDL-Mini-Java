/*
   Grammaire attribuée pour construire l'arbre abstrait correspondant au langage Block
*/

package fr.n7.stl.block;

import java_cup.runtime.*;
import fr.n7.stl.block.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.*;

// Elements du métamodèle pour la construction de l'arbre abstrait
import fr.n7.stl.block.ast.*;
import fr.n7.stl.block.ast.object.*;
import fr.n7.stl.block.ast.expression.*;
import fr.n7.stl.block.ast.expression.accessible.*;
import fr.n7.stl.block.ast.expression.allocation.*;
import fr.n7.stl.block.ast.expression.assignable.*;
import fr.n7.stl.block.ast.expression.value.*;
import fr.n7.stl.block.ast.instruction.*;
import fr.n7.stl.block.ast.instruction.declaration.*;
import fr.n7.stl.block.ast.scope.*;
import fr.n7.stl.block.ast.type.*;
import fr.n7.stl.block.ast.type.declaration.*;
import fr.n7.stl.tam.ast.impl.*;
import fr.n7.stl.tam.ast.*;
import fr.n7.stl.util.*;

/* Variables partagées dans les actions de l'analyseur syntaxique. */
parser code {:

    protected Lexer lexer;

    public String name;

    public Program program;

    public boolean resolve = false;
    public boolean checkType = false;

    public double
        resolveTimeMs,
        checkTypeTimeMs,
        allocateMemoryTimeMs,
        getCodeTimeMs;

    public Fragment fragment;

    public Parser(String _name) {
        this();
        this.name = _name;
    }
:}

/* Initialisation de l'analyseur lexical et des variables partagées. */
init with {:
    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    File file = new File(this.name);
    FileInputStream fis = null;
    try {
        fis = new FileInputStream(file);
    } catch (IOException e) {
        e.printStackTrace();
    }
    lexer = new Lexer(f, fis);
:};

/* Expression qui permet de progresser dans l'analyse lexicale. */
scan with {: return lexer.next_token(); :};

/* Terminaux qui seront transmis par l'analyseur lexical. */
terminal 			UL_Point_Virgule, UL_Virgule, UL_Point, UL_Deux_Points, UL_Point_Interrogation, UL_Point_Exclamation;
terminal			UL_Egal, UL_Double_Plus, UL_Double_Moins, UL_Double_Plus_Prefixe, UL_Double_Moins_Prefixe;
terminal 			UL_Plus, UL_Moins, UL_Moins_Unaire, UL_Asterisque, UL_Oblique, UL_Pour_Cent;
terminal			UL_Esperluette, UL_Double_Barre, UL_Double_Esperluette;
terminal			UL_Parenthese_Ouvrante, UL_Parenthese_Fermante;
terminal			UL_Accolade_Ouvrante, UL_Accolade_Fermante;
terminal			UL_Crochet_Ouvrant, UL_Crochet_Fermant;
terminal			UL_Inferieur, UL_Superieur;
terminal			UL_Inferieur_Egal, UL_Superieur_Egal;
terminal			UL_Double_Egal, UL_Exclamation_Egal;
terminal			UL_Si, UL_Sinon, UL_Tant_Que, UL_Nouveau, UL_Afficher, UL_Retour;
terminal			UL_Definition_Constante, UL_Type_Booleen, UL_Type_Caractere, UL_Type_Chaine, UL_Type_Entier, UL_Type_Flottant, UL_Type_Vide;
terminal String		UL_Identificateur, UL_Chaine, UL_Caractere;
terminal String		UL_Nombre_Entier, UL_Nombre_Flottant, UL_Nul, UL_Vrai, UL_Faux; // Valeur transmise par l'analyseur lexical
terminal            UL_Extends, UL_Class, UL_Implements, UL_Interface, UL_Public, UL_Private, UL_Final, UL_Static, UL_Abstract;

/* Non terminaux avec type renvoyé par actions sémantiques (RESULT = ...) */
non terminal Program                    Driver;
non terminal Program                    Program;
non terminal Block						Bloc;
non terminal List<Instruction>			Instructions;
non terminal Instruction				Instruction;
non terminal Instruction				Declaration;
non terminal List<Expression>			Expressions;
non terminal List<ParameterDeclaration>	Parameters;
non terminal List<ParameterDeclaration> ParametersOrNot;
non terminal Pair<String, PartialType>	Identifiant;
non terminal Type						Type, Atomique;
non terminal Expression 				Expression;
non terminal AssignableExpression		Affectable;
non terminal ProgramDeclaration			ProgramDeclaration;
non terminal InterfaceDeclaration       InterfaceDeclaration;
non terminal ClassDeclaration           ClassDeclaration;
non terminal Definition                 InnerClassDefinitionWithoutModifier;
non terminal List<Definition>           InnerClassDefinitions;
non terminal Definition                 InnerClassDefinition;
non terminal AccessModifier             AccessModifier;
non terminal List<InstanceType>         InstanceTypes;
non terminal List<InstanceType>         InstanceTypesWithEsperluette;
non terminal InstanceType               InstanceType;
non terminal DefinitionModifier         DefinitionModifier;
non terminal ClassName                  ClassName;
non terminal List<GenericType>          GenericTypes;
non terminal GenericType                GenericType;
non terminal List<Signature>            InnerInterfaceDefinitions;
non terminal Signature                  InnerInterfaceDefinition;
non terminal Type                       NullableType;
non terminal ClassModifier              ClassModifier;
non terminal List<InstanceType>         ClassExtension;
non terminal List<InstanceType>	        ClassImplementation;

/* Associativité et Priorité relative des opérateurs (du moins prioritaire au plus prioritaire) */
/* Opérateur le moins prioritiaire */
precedence nonassoc UL_Parenthese_Fermante;	// Résolution du conflit décaler/réduire sur conversion de type
precedence right UL_Egal;
precedence nonassoc UL_Point_Interrogation, UL_Deux_Points;
precedence left UL_Double_Barre;
precedence left UL_Double_Esperluette;
precedence nonassoc UL_Double_Egal, UL_Exclamation_Egal;
precedence nonassoc UL_Inferieur, UL_Inferieur_Egal, UL_Superieur, UL_Superieur_Egal;
precedence left UL_Plus, UL_Moins;
precedence left UL_Asterisque, UL_Oblique, UL_Pour_Cent;
precedence right UL_Nouveau;
precedence left UL_Double_Plus_Prefixe, UL_Double_Moins_Prefixe, UL_Moins_Unaire, UL_Esperluette, UL_Point_Exclamation;
precedence nonassoc UL_Double_Plus, UL_Double_Moins;
precedence left UL_Crochet_Ouvrant, UL_Point, UL_Parenthese_Ouvrante;
precedence left UL_Extends;
/* Opérateur le plus prioritaire */



/* Règles de grammaire attribuée pour la construction de l'arbre abstrait */
// Program
//  - ($InterfaceDeclaration|$ClassDeclaration)+
Driver ::= Program:program
    {:
        this.parser.program = program;
        RESULT = program;
    :};

Program ::=
    Program:program ProgramDeclaration:decl
        {:
			program.add(decl);
			RESULT = program;
		:}
    | ProgramDeclaration:decl
        {:
			RESULT = new Program(decl);
		:}
    ;

ProgramDeclaration ::=
    InterfaceDeclaration:decl
        {: RESULT = decl; :}
    | ClassDeclaration:decl
        {: RESULT = decl; :}
    ;

InterfaceDeclaration ::=
    UL_Interface ClassName:className UL_Accolade_Ouvrante InnerInterfaceDefinitions:definitions UL_Accolade_Fermante
        {:
            RESULT = new InterfaceDeclaration(className, definitions);
        :}
    | UL_Interface ClassName:className UL_Extends InstanceTypes:InstanceTypes UL_Accolade_Ouvrante InnerInterfaceDefinitions:definitions UL_Accolade_Fermante
        {:
			RESULT = new InterfaceDeclaration(className, InstanceTypes, definitions);
		:}
    ;

ClassDeclaration ::=
    ClassModifier:modifier UL_Class ClassName:className ClassExtension:classExtension ClassImplementation:classImplementation UL_Accolade_Ouvrante InnerClassDefinitions:definitions UL_Accolade_Fermante
        {: RESULT = new ClassDeclaration(modifier, className, classExtension, classImplementation, definitions); :}
    ;

ClassModifier ::=
    UL_Final
        {: RESULT = ClassModifier.FINAL; :}
    | UL_Abstract
        {: RESULT = ClassModifier.ABSTRACT; :}
    |
        {: RESULT = null; :}
    ;

ClassExtension ::=
    UL_Extends InstanceTypes:ext
        {:
			RESULT = ext;
		:}
  /*  | UL_Extends InstanceType:ext UL_Implements InstanceTypes:impl
        {:
			impl.add(ext);
			RESULT = impl;
		:}
    | UL_Implements InstanceTypes:impl
        {:
			RESULT = impl;
		:}*/
    |
        {:
			RESULT = new LinkedList<InstanceType>();
		:}
    ;

ClassImplementation ::=
    UL_Implements InstanceTypes:impl
        {:
			RESULT = impl;
		:}
    |
        {:
			RESULT = new LinkedList<InstanceType>();
		:}
	;

ClassName ::=
    UL_Identificateur:ident UL_Inferieur GenericTypes:genericTypes UL_Superieur
        {: RESULT = new ClassName(ident, genericTypes); :}
    | UL_Identificateur:ident
        {: RESULT = new ClassName(ident); :}
    ;

GenericTypes ::=
    GenericTypes:genericTypes UL_Virgule GenericType:genericType
        {:
            genericTypes.add(genericType);
            RESULT = genericTypes;
        :}
    | GenericType:genericType
        {:
            RESULT = new LinkedList<GenericType>();
            RESULT.add(genericType);
        :}
    ;

GenericType ::=
    UL_Identificateur:ident
        {: RESULT = new GenericType(ident); :}
    | UL_Identificateur:ident UL_Extends InstanceTypesWithEsperluette:InstanceTypes
        {: RESULT = new GenericType(ident, InstanceTypes); :}
    ;

InnerClassDefinitions ::=
    InnerClassDefinitions:defs InnerClassDefinition:def
        {: defs.add(def); RESULT = defs; :}
    |
        {: RESULT = new LinkedList<>(); :}
    ;

InnerClassDefinition ::=
    AccessModifier:accessModifier DefinitionModifier:definitionModifier InnerClassDefinitionWithoutModifier:definition
        {:
            definition.setAccessModifier(accessModifier);
            definition.setDefinitionModifier(definitionModifier);
            RESULT = definition;
        :}
    ;

InnerClassDefinitionWithoutModifier ::=
    UL_Identificateur:ident UL_Parenthese_Ouvrante ParametersOrNot:parameters UL_Parenthese_Fermante Bloc:body
        {: RESULT = new Constructor(ident, parameters, body); :}
    | Type:type UL_Identificateur:ident UL_Point_Virgule
        {: RESULT = new AttributeDefinition(type, ident); :}
    | Type:type UL_Identificateur:ident UL_Parenthese_Ouvrante ParametersOrNot:parameters UL_Parenthese_Fermante Bloc:body
        {: RESULT = new MethodDefinition(new Signature(type, ident, parameters), body); :}
    ;

InnerInterfaceDefinitions ::=
    InnerInterfaceDefinitions:defs InnerInterfaceDefinition:def
        {: defs.add(def); RESULT = defs; :}
    |
        {: RESULT = new LinkedList<>(); :};

InnerInterfaceDefinition ::=
    NullableType:type UL_Identificateur:ident UL_Parenthese_Ouvrante ParametersOrNot:parameters UL_Parenthese_Fermante UL_Point_Virgule
        {: RESULT = new Signature(type, ident, parameters); :}
    ;

AccessModifier ::=
    UL_Public
        {: RESULT = AccessModifier.PUBLIC; :}
    | UL_Private
        {: RESULT = AccessModifier.PRIVATE; :}
    ;

DefinitionModifier ::=
    UL_Static
        {: RESULT = DefinitionModifier.STATIC; :}
    | UL_Final
        {: RESULT = DefinitionModifier.FINAL; :}
    | UL_Static UL_Final
        {: RESULT = DefinitionModifier.STATIC_FINAL; :}
    |
        {: RESULT = null; :}
    ;

InstanceTypes ::=
    InstanceType:InstanceType
        {:
			List<InstanceType> InstanceTypes = new LinkedList<>();
			InstanceTypes.add(InstanceType);
			RESULT = InstanceTypes;
        :}
    | InstanceTypes:InstanceTypes UL_Virgule InstanceType:InstanceType
        {:
			InstanceTypes.add(InstanceType);
			RESULT = InstanceTypes;
		:};

InstanceTypesWithEsperluette ::=
    InstanceType:InstanceType
        {:
			List<InstanceType> InstanceTypes = new LinkedList<>();
			InstanceTypes.add(InstanceType);
			RESULT = InstanceTypes;
        :}
    | InstanceTypesWithEsperluette:InstanceTypes UL_Esperluette InstanceType:InstanceType
        {:
			InstanceTypes.add(InstanceType);
			RESULT = InstanceTypes;
		:};

InstanceType ::=
    UL_Identificateur:ident
        {: RESULT = new InstanceType(ident); :}
    | UL_Identificateur:ident UL_Inferieur InstanceTypes:InstanceTypes UL_Superieur
        {: RESULT = new InstanceType(ident, InstanceTypes); :}
    ;

NullableType ::=
    UL_Type_Vide
        {: RESULT = AtomicType.VoidType; :}
    | Type:type
        {: RESULT = type; :}
    ;

// BLOCK
Bloc ::= UL_Accolade_Ouvrante Instructions:instructions UL_Accolade_Fermante
			{:
				RESULT = new Block( instructions );
			:}
		;

Atomique ::= UL_Type_Booleen
			{:
				RESULT = AtomicType.BooleanType;
			:}
		|	UL_Type_Caractere
			{:
				RESULT = AtomicType.CharacterType;
			:}
		|	UL_Type_Chaine
			{:
				RESULT = AtomicType.StringType;
			:}
		|	UL_Type_Entier
			{:
				RESULT = AtomicType.IntegerType;
			:}
		;

Type ::= Atomique:atomique
			{:
				RESULT = atomique;
			:}
/*		| ClassName:className  // MyClass<T>  MyClass<Integer>
			{:
				RESULT = new InstanceType(className.getName(), className.getGenerics());
			:}*/
		| InstanceType:InstanceType
			{:
				RESULT = InstanceType;
			:}
/*		| UL_Identificateur:nom
			{:
				RESULT = new NamedType( nom );
			:}
*/
		;

Instructions ::= Instructions:instructions Instruction:instruction
				{:
					instructions.add( instruction );
					RESULT = instructions;
				:}
			|
				{: RESULT = new LinkedList<Instruction>(); :}
			;

ParametersOrNot ::=
    Parameters:parameters
        {: RESULT = parameters; :}
    |
        {: RESULT = new LinkedList<ParameterDeclaration>(); :}
    ;

Parameters ::= Parameters:parameters UL_Virgule Type:type Identifiant:identifiant
				{:
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = parameters;
				:}
			| Type:type Identifiant:identifiant
				{:
					List<ParameterDeclaration> _parameters = new LinkedList<ParameterDeclaration>();
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					_parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = _parameters;
				:}
			;

Identifiant ::= UL_Identificateur:nom
				{:
					RESULT = new Pair<String, PartialType>(nom, null);
				:}
			| Identifiant:identifiant UL_Crochet_Ouvrant UL_Crochet_Fermant
				{:
					if (identifiant.getRight() == null) {
						identifiant.setRight( new PartialArrayType() );
					} else {
						identifiant.getRight().enrich(new PartialArrayType());
					}
					RESULT = identifiant;
				:}
			| UL_Parenthese_Ouvrante Identifiant:identifiant UL_Parenthese_Fermante
				{:
					RESULT = identifiant;
				:}
			;


Declaration ::= Type:type Identifiant:identifiant UL_Egal Expression:valeur UL_Point_Virgule
				{:
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new VariableDeclaration( identifiant.getLeft(), _type, valeur);
				:}
			;

Instruction ::= Declaration:declaration
				{:
					RESULT = declaration;
				:}
			| Affectable:affectable UL_Egal Expression:expression UL_Point_Virgule
				{:
					RESULT = new Assignment( affectable, expression);
				:}
			| UL_Identificateur:nom UL_Parenthese_Ouvrante Expressions:parametres UL_Parenthese_Fermante  UL_Point_Virgule
             	{:
					RESULT = new FunctionCall( nom, parametres );
				:}
			| UL_Identificateur:nom UL_Parenthese_Ouvrante UL_Parenthese_Fermante  UL_Point_Virgule
             	{:
					List<Expression> _parametres = new LinkedList<Expression>();
					RESULT = new FunctionCall( nom, _parametres );
				:}
			| UL_Afficher Expression:expression UL_Point_Virgule
				{:
					RESULT = new Printer( expression );
				:}
			| UL_Si UL_Parenthese_Ouvrante Expression:condition UL_Parenthese_Fermante Bloc:alors UL_Sinon Bloc:sinon
				{:
					RESULT = new Conditional( condition, alors, sinon);
				:}
			| UL_Si UL_Parenthese_Ouvrante Expression:condition UL_Parenthese_Fermante Bloc:alors
				{:
					RESULT = new Conditional( condition, alors);
				:}
			| UL_Tant_Que UL_Parenthese_Ouvrante Expression:condition UL_Parenthese_Fermante Bloc:corps
				{:
					RESULT = new Iteration( condition, corps);
				:}
			| UL_Retour Expression:expression UL_Point_Virgule
				{:
					RESULT = new Return( expression);
				:}
			;

Expressions ::= Expressions:expressions UL_Virgule Expression:expression
				{:
					expressions.add( expression );
					RESULT = expressions;
				:}
            | Expression:expression
            		{:
					List<Expression> _expressions = new LinkedList<Expression>();
					_expressions.add( expression );
					RESULT = _expressions;
				:}
            ;

Affectable ::= UL_Identificateur:name
				{:
					RESULT = new VariableAssignment(name);
				:}
			| Affectable:tableau UL_Crochet_Ouvrant Expression:indice UL_Crochet_Fermant
				{:
					RESULT = new ArrayAssignment(tableau, indice);
				:}
			| UL_Parenthese_Ouvrante Affectable:affectable UL_Parenthese_Fermante
				{:
					RESULT = affectable;
				:}
			| Affectable:object UL_Point UL_Identificateur:attribute
				{:
					RESULT = new AttributeAssignment(object, attribute);
				:}
			;

Expression ::= /* Affectable:affectable UL_Egal Expression:expression
				{:
					RESULT = new Assignment( affectable, expression);
				:}
			| */ Expression:gauche UL_Double_Egal Expression:droite
				{:
					RESULT = new BinaryExpression( gauche, BinaryOperator.Equals, droite);
				:}
			| Expression:gauche UL_Exclamation_Egal Expression:droite
				{:
					RESULT = new BinaryExpression( gauche, BinaryOperator.Different, droite);
				:}
			| Expression:gauche UL_Inferieur Expression:droite
				{:
					RESULT = new BinaryExpression( gauche, BinaryOperator.Lesser, droite);
				:}
			| Expression:gauche UL_Superieur Expression:droite
				{:
					RESULT = new BinaryExpression( gauche, BinaryOperator.Greater, droite);
				:}
			| Expression:gauche UL_Inferieur_Egal Expression:droite
				{:
					RESULT = new BinaryExpression( gauche, BinaryOperator.LesserOrEqual, droite);
				:}
			| Expression:gauche UL_Superieur_Egal Expression:droite
				{:
					RESULT = new BinaryExpression( gauche, BinaryOperator.GreaterOrEqual, droite);
				:}
			| Expression:gauche UL_Double_Barre Expression:droite
				{:
					RESULT = new BinaryExpression( gauche, BinaryOperator.Or, droite);
				:}
            | Expression:gauche UL_Double_Esperluette Expression:droite
             	{:
					RESULT = new BinaryExpression( gauche, BinaryOperator.And, droite);
				:}
			| Expression:gauche UL_Plus Expression:droite
				{:
					RESULT = new BinaryExpression( gauche, BinaryOperator.Add, droite);
				:}
            | Expression:gauche UL_Moins Expression:droite
             	{:
					RESULT = new BinaryExpression( gauche, BinaryOperator.Substract, droite);
				:}
            | Expression:gauche UL_Asterisque Expression:droite
             	{:
					RESULT = new BinaryExpression( gauche, BinaryOperator.Multiply, droite);
				:}
			| Expression:gauche UL_Oblique Expression:droite
             	{:
					RESULT = new BinaryExpression( gauche, BinaryOperator.Divide, droite);
				:}
			| Expression:gauche UL_Pour_Cent Expression:droite
             	{:
					RESULT = new BinaryExpression( gauche, BinaryOperator.Modulo, droite);
				:}
            | UL_Moins Expression:expression
             	{:
					RESULT = new UnaryExpression( UnaryOperator.Opposite, expression);
				:}
            | UL_Point_Exclamation Expression:expression
             	{:
					RESULT = new UnaryExpression( UnaryOperator.Negate, expression);
				:}
			| Expression:expression UL_Crochet_Ouvrant Expression:indice UL_Crochet_Fermant
				{:
					RESULT = new ArrayAccess( expression, indice );
				:}
			| Expression:condition UL_Point_Interrogation Expression:alors UL_Deux_Points Expression:sinon
				{:
					RESULT = new ConditionalExpression( condition, alors, sinon );
				:}
			| UL_Parenthese_Ouvrante Expression:expression UL_Parenthese_Fermante
             	{:
					RESULT = expression;
				:}
			| UL_Parenthese_Ouvrante UL_Identificateur:type UL_Parenthese_Fermante Expression:expression
             	{:
					RESULT = new TypeCast( expression, type );
				:}
			| UL_Accolade_Ouvrante Expressions:expressions UL_Accolade_Fermante
             	{:
					RESULT = new Sequence( expressions );
				:}
			| UL_Identificateur:nom
             	{:
					RESULT = new IdentifierAccess( nom );
				:}
			| UL_Identificateur:nom UL_Parenthese_Ouvrante Expressions:parametres UL_Parenthese_Fermante
             	{:
					RESULT = new FunctionCall( nom, parametres );
				:}
			| UL_Identificateur:nom UL_Parenthese_Ouvrante UL_Parenthese_Fermante
             	{:
					List<Expression> _parametres = new LinkedList<Expression>();
					RESULT = new FunctionCall( nom, _parametres );
				:}
			| UL_Nombre_Entier:entier
             	{:
					RESULT = new IntegerValue( entier );
				:}
			| UL_Vrai
             	{:
					RESULT = BooleanValue.True;
				:}
			| UL_Faux
             	{:
					RESULT = BooleanValue.False;
				:}
			| UL_Nul
             	{:
					RESULT = NullValue.Null;
				:}
			| UL_Caractere:caractere
             	{:
					RESULT = new CharacterValue( caractere );
				:}
			| UL_Chaine:chaine
             	{:
					RESULT = new StringValue( chaine );
				:}
			| UL_Nouveau Type:type UL_Crochet_Ouvrant Expression:taille UL_Crochet_Fermant
             	{:
					RESULT = new ArrayAllocation(type, taille);
				:}
			| Expression:expression UL_Point UL_Identificateur:etiquette UL_Parenthese_Ouvrante Expressions:parametres UL_Parenthese_Fermante
				{:
					RESULT = new MethodCall( expression, etiquette, parametres );
				:}
			| Expression:expression UL_Point UL_Identificateur:etiquette UL_Parenthese_Ouvrante UL_Parenthese_Fermante
				{:
					RESULT = new MethodCall( expression, etiquette, new LinkedList<Expression>() );
				:}
			/*
			| UL_This UL_Point UL_Identificateur:method UL_Parenthese_Ouvrante Expressions:parameters UL_Parenthese_Fermante UL_Point_Virgule
				{:
				   RESULT = new MethodCall("this", method, parameters );
				:}
			| UL_This UL_Point UL_Identificateur:method UL_Parenthese_Ouvrante UL_Parenthese_Fermante UL_Point_Virgule
				{:
					RESULT = new MethodCall("this", method, new LinkedList<Expression>());
				:}
				*/
			| Expression:object UL_Point UL_Identificateur:method
				{:
				    RESULT = new AttributeAccess(object, method);
				:}
			| UL_Nouveau Type:type UL_Parenthese_Ouvrante UL_Parenthese_Fermante
             	{:
					RESULT = new ObjectAllocation(type, new LinkedList<>());
				:}
			| UL_Nouveau Type:type UL_Parenthese_Ouvrante Expressions:parameters UL_Parenthese_Fermante
             	{:
					RESULT = new ObjectAllocation(type, parameters);
				:}
            ;