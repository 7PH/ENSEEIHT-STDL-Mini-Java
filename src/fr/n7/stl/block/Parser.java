
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.n7.stl.block;

import java_cup.runtime.*;
import fr.n7.stl.block.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.*;
import fr.n7.stl.block.ast.*;
import fr.n7.stl.block.ast.expression.*;
import fr.n7.stl.block.ast.expression.accessible.*;
import fr.n7.stl.block.ast.expression.allocation.*;
import fr.n7.stl.block.ast.expression.assignable.*;
import fr.n7.stl.block.ast.expression.value.*;
import fr.n7.stl.block.ast.instruction.*;
import fr.n7.stl.block.ast.instruction.declaration.*;
import fr.n7.stl.block.ast.scope.*;
import fr.n7.stl.block.ast.type.*;
import fr.n7.stl.block.ast.type.declaration.*;
import fr.n7.stl.tam.ast.impl.*;
import fr.n7.stl.tam.ast.*;
import fr.n7.stl.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /** Default constructor. */
    public Parser() {super();}

    /** Constructor which sets the default scanner. */
    public Parser(java_cup.runtime.Scanner s) {super(s);}

    /** Constructor which sets the default scanner. */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[] {
                    "\000\167\000\002\015\004\000\002\002\004\000\002\015" +
                            "\004\000\002\015\003\000\002\015\003\000\002\016\007" +
                            "\000\002\016\011\000\002\020\005\000\002\020\002\000" +
                            "\002\021\006\000\002\021\007\000\002\024\003\000\002" +
                            "\024\003\000\002\007\003\000\002\007\005\000\002\025" +
                            "\004\000\002\022\003\000\002\022\005\000\002\023\003" +
                            "\000\002\023\006\000\002\017\010\000\002\026\003\000" +
                            "\002\026\003\000\002\026\002\000\002\005\003\000\002" +
                            "\005\006\000\002\031\003\000\002\031\005\000\002\032" +
                            "\003\000\002\032\005\000\002\033\003\000\002\033\005" +
                            "\000\002\027\004\000\002\027\006\000\002\027\004\000" +
                            "\002\027\002\000\002\030\004\000\002\030\002\000\002" +
                            "\035\004\000\002\035\005\000\002\035\005\000\002\040" +
                            "\003\000\002\040\003\000\002\040\004\000\002\040\002" +
                            "\000\002\037\006\000\002\037\007\000\002\036\003\000" +
                            "\002\036\003\000\002\041\005\000\002\042\004\000\002" +
                            "\042\005\000\002\044\003\000\002\044\005\000\002\043" +
                            "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
                            "\000\002\043\003\000\002\002\005\000\002\003\004\000" +
                            "\002\003\002\000\002\007\006\000\002\007\004\000\002" +
                            "\005\007\000\002\004\003\000\002\004\006\000\002\004" +
                            "\007\000\002\004\006\000\002\004\005\000\002\004\011" +
                            "\000\002\004\007\000\002\004\007\000\002\004\005\000" +
                            "\002\006\005\000\002\006\003\000\002\014\003\000\002" +
                            "\014\006\000\002\014\005\000\002\014\005\000\002\014" +
                            "\010\000\002\014\007\000\002\014\006\000\002\014\005" +
                            "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
                            "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
                            "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
                            "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
                            "\000\002\013\004\000\002\013\004\000\002\013\006\000" +
                            "\002\013\005\000\002\013\010\000\002\013\007\000\002" +
                            "\013\007\000\002\013\005\000\002\013\006\000\002\013" +
                            "\005\000\002\013\003\000\002\013\006\000\002\013\005" +
                            "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
                            "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
                            "\013\007\000\002\013\006\000\002\013\007" });

    /** Access to production table. */
    public short[][] production_table() {return _production_table;}

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[] {
                    "\000\354\000\012\066\uffea\101\006\104\011\106\012\001" +
                            "\002\000\014\002\356\066\uffea\101\006\104\011\106\012" +
                            "\001\002\000\014\002\ufffe\066\ufffe\101\ufffe\104\ufffe\106" +
                            "\ufffe\001\002\000\004\066\015\001\002\000\014\002\ufffd" +
                            "\066\ufffd\101\ufffd\104\ufffd\106\ufffd\001\002\000\004\066" +
                            "\015\001\002\000\004\066\uffec\001\002\000\004\066\uffeb" +
                            "\001\002\000\010\036\uffde\076\161\100\160\001\002\000" +
                            "\002\001\002\000\012\036\uffe9\040\016\076\uffe9\100\uffe9" +
                            "\001\002\000\004\066\020\001\002\000\006\005\036\041" +
                            "\037\001\002\000\010\005\uffe5\041\uffe5\076\022\001\002" +
                            "\000\006\005\uffe7\041\uffe7\001\002\000\004\066\024\001" +
                            "\002\000\010\005\uffe3\025\uffe3\041\uffe3\001\002\000\016" +
                            "\005\uffef\025\uffef\036\uffef\040\030\041\uffef\100\uffef\001" +
                            "\002\000\010\005\uffe4\025\026\041\uffe4\001\002\000\004" +
                            "\066\024\001\002\000\010\005\uffe2\025\uffe2\041\uffe2\001" +
                            "\002\000\004\066\024\001\002\000\010\005\ufff1\036\ufff1" +
                            "\041\ufff1\001\002\000\006\005\033\041\034\001\002\000" +
                            "\004\066\024\001\002\000\014\005\uffee\025\uffee\036\uffee" +
                            "\041\uffee\100\uffee\001\002\000\010\005\ufff0\036\ufff0\041" +
                            "\ufff0\001\002\000\004\066\020\001\002\000\026\030\uffe8" +
                            "\035\uffe8\036\uffe8\046\uffe8\050\uffe8\052\uffe8\053\uffe8\066" +
                            "\uffe8\076\uffe8\100\uffe8\001\002\000\006\005\uffe6\041\uffe6" +
                            "\001\002\000\004\012\042\001\002\000\032\011\043\020" +
                            "\056\030\057\034\053\051\050\066\052\067\044\070\054" +
                            "\071\055\073\047\074\046\075\045\001\002\000\032\011" +
                            "\043\020\056\030\057\034\053\051\050\066\052\067\044" +
                            "\070\054\071\055\073\047\074\046\075\045\001\002\000" +
                            "\056\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\017\uff8e" +
                            "\020\uff8e\022\uff8e\023\uff8e\024\uff8e\026\uff8e\027\uff8e\031" +
                            "\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e" +
                            "\043\uff8e\044\uff8e\045\uff8e\001\002\000\056\004\uff91\005" +
                            "\uff91\006\uff91\007\uff91\010\uff91\017\uff91\020\uff91\022\uff91" +
                            "\023\uff91\024\uff91\026\uff91\027\uff91\031\uff91\035\uff91\036" +
                            "\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91" +
                            "\045\uff91\001\002\000\056\004\uff92\005\uff92\006\uff92\007" +
                            "\uff92\010\uff92\017\uff92\020\uff92\022\uff92\023\uff92\024\uff92" +
                            "\026\uff92\027\uff92\031\uff92\035\uff92\036\uff92\037\uff92\040" +
                            "\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\001\002" +
                            "\000\056\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\017" +
                            "\uff90\020\uff90\022\uff90\023\uff90\024\uff90\026\uff90\027\uff90" +
                            "\031\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042" +
                            "\uff90\043\uff90\044\uff90\045\uff90\001\002\000\002\001\002" +
                            "\000\044\004\146\006\103\010\107\017\074\020\110\022" +
                            "\105\023\077\024\100\026\072\027\073\036\076\040\102" +
                            "\041\111\042\104\043\106\044\075\045\101\001\002\000" +
                            "\060\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\017\uff96" +
                            "\020\uff96\022\uff96\023\uff96\024\uff96\026\uff96\027\uff96\030" +
                            "\063\031\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96" +
                            "\042\uff96\043\uff96\044\uff96\045\uff96\001\002\000\032\011" +
                            "\043\020\056\030\057\034\053\051\050\066\052\067\044" +
                            "\070\054\071\055\073\047\074\046\075\045\001\002\000" +
                            "\056\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\017\uff8f" +
                            "\020\uff8f\022\uff8f\023\uff8f\024\uff8f\026\uff8f\027\uff8f\031" +
                            "\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
                            "\043\uff8f\044\uff8f\045\uff8f\001\002\000\056\004\uff93\005" +
                            "\uff93\006\uff93\007\uff93\010\uff93\017\uff93\020\uff93\022\uff93" +
                            "\023\uff93\024\uff93\026\uff93\027\uff93\031\uff93\035\uff93\036" +
                            "\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93" +
                            "\045\uff93\001\002\000\032\011\043\020\056\030\057\034" +
                            "\053\051\050\066\052\067\044\070\054\071\055\073\047" +
                            "\074\046\075\045\001\002\000\032\011\043\020\056\030" +
                            "\057\034\053\051\050\066\061\067\044\070\054\071\055" +
                            "\073\047\074\046\075\045\001\002\000\044\006\103\010" +
                            "\107\017\074\020\110\022\105\023\077\024\100\026\072" +
                            "\027\073\031\142\036\076\040\102\041\111\042\104\043" +
                            "\106\044\075\045\101\001\002\000\046\006\uff96\010\uff96" +
                            "\017\uff96\020\uff96\022\uff96\023\uff96\024\uff96\026\uff96\027" +
                            "\uff96\030\063\031\uff96\036\uff96\040\uff96\041\uff96\042\uff96" +
                            "\043\uff96\044\uff96\045\uff96\001\002\000\032\011\043\020" +
                            "\056\030\057\034\053\051\050\066\052\067\044\070\054" +
                            "\071\055\073\047\074\046\075\045\001\002\000\034\011" +
                            "\043\020\056\030\057\031\064\034\053\051\050\066\052" +
                            "\067\044\070\054\071\055\073\047\074\046\075\045\001" +
                            "\002\000\056\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94" +
                            "\017\uff94\020\uff94\022\uff94\023\uff94\024\uff94\026\uff94\027" +
                            "\uff94\031\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94" +
                            "\042\uff94\043\uff94\044\uff94\045\uff94\001\002\000\050\005" +
                            "\uffb6\006\103\010\107\017\074\020\110\022\105\023\077" +
                            "\024\100\026\072\027\073\031\uffb6\035\uffb6\036\076\040" +
                            "\102\041\111\042\104\043\106\044\075\045\101\001\002" +
                            "\000\006\005\067\031\070\001\002\000\032\011\043\020" +
                            "\056\030\057\034\053\051\050\066\052\067\044\070\054" +
                            "\071\055\073\047\074\046\075\045\001\002\000\056\004" +
                            "\uff95\005\uff95\006\uff95\007\uff95\010\uff95\017\uff95\020\uff95" +
                            "\022\uff95\023\uff95\024\uff95\026\uff95\027\uff95\031\uff95\035" +
                            "\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
                            "\044\uff95\045\uff95\001\002\000\050\005\uffb7\006\103\010" +
                            "\107\017\074\020\110\022\105\023\077\024\100\026\072" +
                            "\027\073\031\uffb7\035\uffb7\036\076\040\102\041\111\042" +
                            "\104\043\106\044\075\045\101\001\002\000\032\011\043" +
                            "\020\056\030\057\034\053\051\050\066\052\067\044\070" +
                            "\054\071\055\073\047\074\046\075\045\001\002\000\032" +
                            "\011\043\020\056\030\057\034\053\051\050\066\052\067" +
                            "\044\070\054\071\055\073\047\074\046\075\045\001\002" +
                            "\000\032\011\043\020\056\030\057\034\053\051\050\066" +
                            "\052\067\044\070\054\071\055\073\047\074\046\075\045" +
                            "\001\002\000\032\011\043\020\056\030\057\034\053\051" +
                            "\050\066\052\067\044\070\054\071\055\073\047\074\046" +
                            "\075\045\001\002\000\032\011\043\020\056\030\057\034" +
                            "\053\051\050\066\052\067\044\070\054\071\055\073\047" +
                            "\074\046\075\045\001\002\000\032\011\043\020\056\030" +
                            "\057\034\053\051\050\066\052\067\044\070\054\071\055" +
                            "\073\047\074\046\075\045\001\002\000\032\011\043\020" +
                            "\056\030\057\034\053\051\050\066\052\067\044\070\054" +
                            "\071\055\073\047\074\046\075\045\001\002\000\032\011" +
                            "\043\020\056\030\057\034\053\051\050\066\052\067\044" +
                            "\070\054\071\055\073\047\074\046\075\045\001\002\000" +
                            "\032\011\043\020\056\030\057\034\053\051\050\066\052" +
                            "\067\044\070\054\071\055\073\047\074\046\075\045\001" +
                            "\002\000\004\066\122\001\002\000\032\011\043\020\056" +
                            "\030\057\034\053\051\050\066\052\067\044\070\054\071" +
                            "\055\073\047\074\046\075\045\001\002\000\032\011\043" +
                            "\020\056\030\057\034\053\051\050\066\052\067\044\070" +
                            "\054\071\055\073\047\074\046\075\045\001\002\000\032" +
                            "\011\043\020\056\030\057\034\053\051\050\066\052\067" +
                            "\044\070\054\071\055\073\047\074\046\075\045\001\002" +
                            "\000\032\011\043\020\056\030\057\034\053\051\050\066" +
                            "\052\067\044\070\054\071\055\073\047\074\046\075\045" +
                            "\001\002\000\032\011\043\020\056\030\057\034\053\051" +
                            "\050\066\052\067\044\070\054\071\055\073\047\074\046" +
                            "\075\045\001\002\000\032\011\043\020\056\030\057\034" +
                            "\053\051\050\066\052\067\044\070\054\071\055\073\047" +
                            "\074\046\075\045\001\002\000\046\004\uffaa\005\uffaa\006" +
                            "\103\007\uffaa\010\uffaa\017\074\020\110\022\105\023\077" +
                            "\024\100\026\uffaa\027\uffaa\031\uffaa\035\uffaa\036\076\037" +
                            "\uffaa\044\uffaa\045\uffaa\001\002\000\056\004\uffa4\005\uffa4" +
                            "\006\103\007\uffa4\010\uffa4\017\uffa4\020\uffa4\022\105\023" +
                            "\077\024\100\026\uffa4\027\uffa4\031\uffa4\035\uffa4\036\076" +
                            "\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045" +
                            "\uffa4\001\002\000\044\006\103\007\115\010\107\017\074" +
                            "\020\110\022\105\023\077\024\100\026\072\027\073\036" +
                            "\076\040\102\041\111\042\104\043\106\044\075\045\101" +
                            "\001\002\000\032\011\043\020\056\030\057\034\053\051" +
                            "\050\066\052\067\044\070\054\071\055\073\047\074\046" +
                            "\075\045\001\002\000\054\004\uff9a\005\uff9a\006\103\007" +
                            "\uff9a\017\074\020\110\022\105\023\077\024\100\026\072" +
                            "\027\073\031\uff9a\035\uff9a\036\076\037\uff9a\040\102\041" +
                            "\111\042\104\043\106\044\075\045\101\001\002\000\046" +
                            "\004\uffa8\005\uffa8\006\103\007\uffa8\010\uffa8\017\074\020" +
                            "\110\022\105\023\077\024\100\026\uffa8\027\uffa8\031\uffa8" +
                            "\035\uffa8\036\076\037\uffa8\044\uffa8\045\uffa8\001\002\000" +
                            "\056\004\uffa3\005\uffa3\006\103\007\uffa3\010\uffa3\017\uffa3" +
                            "\020\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3\031" +
                            "\uffa3\035\uffa3\036\076\037\uffa3\040\uffa3\041\uffa3\042\uffa3" +
                            "\043\uffa3\044\uffa3\045\uffa3\001\002\000\046\004\uffa9\005" +
                            "\uffa9\006\103\007\uffa9\010\uffa9\017\074\020\110\022\105" +
                            "\023\077\024\100\026\uffa9\027\uffa9\031\uffa9\035\uffa9\036" +
                            "\076\037\uffa9\044\uffa9\045\uffa9\001\002\000\060\004\uff9d" +
                            "\005\uff9d\006\uff9d\007\uff9d\010\uff9d\017\uff9d\020\uff9d\022" +
                            "\uff9d\023\uff9d\024\uff9d\026\uff9d\027\uff9d\030\123\031\uff9d" +
                            "\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043" +
                            "\uff9d\044\uff9d\045\uff9d\001\002\000\034\011\043\020\056" +
                            "\030\057\031\124\034\053\051\050\066\052\067\044\070" +
                            "\054\071\055\073\047\074\046\075\045\001\002\000\056" +
                            "\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\017\uff9b\020" +
                            "\uff9b\022\uff9b\023\uff9b\024\uff9b\026\uff9b\027\uff9b\031\uff9b" +
                            "\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043" +
                            "\uff9b\044\uff9b\045\uff9b\001\002\000\006\005\067\031\126" +
                            "\001\002\000\056\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010" +
                            "\uff9c\017\uff9c\020\uff9c\022\uff9c\023\uff9c\024\uff9c\026\uff9c" +
                            "\027\uff9c\031\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
                            "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\001\002\000\046" +
                            "\004\uffab\005\uffab\006\103\007\uffab\010\uffab\017\074\020" +
                            "\110\022\105\023\077\024\100\026\uffab\027\uffab\031\uffab" +
                            "\035\uffab\036\076\037\uffab\044\uffab\045\uffab\001\002\000" +
                            "\052\004\uffac\005\uffac\006\103\007\uffac\010\uffac\017\074" +
                            "\020\110\022\105\023\077\024\100\026\uffac\027\uffac\031" +
                            "\uffac\035\uffac\036\076\037\uffac\040\102\041\111\042\104" +
                            "\043\106\001\002\000\056\004\uffa1\005\uffa1\006\103\007" +
                            "\uffa1\010\uffa1\017\uffa1\020\uffa1\022\uffa1\023\uffa1\024\uffa1" +
                            "\026\uffa1\027\uffa1\031\uffa1\035\uffa1\036\076\037\uffa1\040" +
                            "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\001\002" +
                            "\000\056\004\uffa2\005\uffa2\006\103\007\uffa2\010\uffa2\017" +
                            "\uffa2\020\uffa2\022\uffa2\023\uffa2\024\uffa2\026\uffa2\027\uffa2" +
                            "\031\uffa2\035\uffa2\036\076\037\uffa2\040\uffa2\041\uffa2\042" +
                            "\uffa2\043\uffa2\044\uffa2\045\uffa2\001\002\000\044\006\103" +
                            "\010\107\017\074\020\110\022\105\023\077\024\100\026" +
                            "\072\027\073\036\076\037\134\040\102\041\111\042\104" +
                            "\043\106\044\075\045\101\001\002\000\056\004\uff9e\005" +
                            "\uff9e\006\uff9e\007\uff9e\010\uff9e\017\uff9e\020\uff9e\022\uff9e" +
                            "\023\uff9e\024\uff9e\026\uff9e\027\uff9e\031\uff9e\035\uff9e\036" +
                            "\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e" +
                            "\045\uff9e\001\002\000\052\004\uffad\005\uffad\006\103\007" +
                            "\uffad\010\uffad\017\074\020\110\022\105\023\077\024\100" +
                            "\026\uffad\027\uffad\031\uffad\035\uffad\036\076\037\uffad\040" +
                            "\102\041\111\042\104\043\106\001\002\000\056\004\uffa5" +
                            "\005\uffa5\006\103\007\uffa5\010\uffa5\017\uffa5\020\uffa5\022" +
                            "\105\023\077\024\100\026\uffa5\027\uffa5\031\uffa5\035\uffa5" +
                            "\036\076\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
                            "\uffa5\045\uffa5\001\002\000\056\004\uffa6\005\uffa6\006\103" +
                            "\007\uffa6\010\uffa6\017\074\020\110\022\105\023\077\024" +
                            "\100\026\uffa6\027\uffa6\031\uffa6\035\uffa6\036\076\037\uffa6" +
                            "\040\102\041\111\042\104\043\106\044\075\045\101\001" +
                            "\002\000\056\004\uffa7\005\uffa7\006\103\007\uffa7\010\uffa7" +
                            "\017\074\020\110\022\105\023\077\024\100\026\uffa7\027" +
                            "\073\031\uffa7\035\uffa7\036\076\037\uffa7\040\102\041\111" +
                            "\042\104\043\106\044\075\045\101\001\002\000\056\004" +
                            "\uff98\005\uff98\006\103\007\uff98\010\107\017\074\020\110" +
                            "\022\105\023\077\024\100\026\072\027\073\031\uff98\035" +
                            "\uff98\036\076\037\uff98\040\102\041\111\042\104\043\106" +
                            "\044\075\045\101\001\002\000\056\004\uff99\005\uff99\006" +
                            "\uff99\007\uff99\010\uff99\017\uff99\020\uff99\022\uff99\023\uff99" +
                            "\024\uff99\026\uff99\027\uff99\031\uff99\035\uff99\036\uff99\037" +
                            "\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99" +
                            "\001\002\000\056\004\uffa0\005\uffa0\006\103\007\uffa0\010" +
                            "\uffa0\017\uffa0\020\uffa0\022\105\023\077\024\100\026\uffa0" +
                            "\027\uffa0\031\uffa0\035\uffa0\036\076\037\uffa0\040\uffa0\041" +
                            "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\001\002\000\006" +
                            "\005\067\035\145\001\002\000\056\004\uff97\005\uff97\006" +
                            "\uff97\007\uff97\010\uff97\017\uff97\020\uff97\022\uff97\023\uff97" +
                            "\024\uff97\026\uff97\027\uff97\031\uff97\035\uff97\036\uff97\037" +
                            "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
                            "\001\002\000\026\030\uffc1\035\uffc1\036\uffc1\046\uffc1\050" +
                            "\uffc1\052\uffc1\053\uffc1\066\uffc1\076\uffc1\100\uffc1\001\002" +
                            "\000\006\030\151\036\150\001\002\000\032\011\043\020" +
                            "\056\030\057\034\053\051\050\066\052\067\044\070\054" +
                            "\071\055\073\047\074\046\075\045\001\002\000\034\011" +
                            "\043\020\056\030\057\031\152\034\053\051\050\066\052" +
                            "\067\044\070\054\071\055\073\047\074\046\075\045\001" +
                            "\002\000\056\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c" +
                            "\017\uff8c\020\uff8c\022\uff8c\023\uff8c\024\uff8c\026\uff8c\027" +
                            "\uff8c\031\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c" +
                            "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\001\002\000\006\005" +
                            "\067\031\154\001\002\000\056\004\uff8b\005\uff8b\006\uff8b" +
                            "\007\uff8b\010\uff8b\017\uff8b\020\uff8b\022\uff8b\023\uff8b\024" +
                            "\uff8b\026\uff8b\027\uff8b\031\uff8b\035\uff8b\036\uff8b\037\uff8b" +
                            "\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\001" +
                            "\002\000\044\006\103\010\107\017\074\020\110\022\105" +
                            "\023\077\024\100\026\072\027\073\036\076\037\156\040" +
                            "\102\041\111\042\104\043\106\044\075\045\101\001\002" +
                            "\000\056\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\017" +
                            "\uff8d\020\uff8d\022\uff8d\023\uff8d\024\uff8d\026\uff8d\027\uff8d" +
                            "\031\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042" +
                            "\uff8d\043\uff8d\044\uff8d\045\uff8d\001\002\000\056\004\uff9f" +
                            "\005\uff9f\006\103\007\uff9f\010\uff9f\017\uff9f\020\uff9f\022" +
                            "\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\031\uff9f\035\uff9f" +
                            "\036\076\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044" +
                            "\uff9f\045\uff9f\001\002\000\004\066\024\001\002\000\004" +
                            "\066\024\001\002\000\004\036\163\001\002\000\010\037" +
                            "\uffdc\102\uffdc\103\uffdc\001\002\000\010\037\171\102\167" +
                            "\103\170\001\002\000\010\037\uffdd\102\uffdd\103\uffdd\001" +
                            "\002\000\024\060\uffd5\061\uffd5\062\uffd5\063\uffd5\065\uffd5" +
                            "\066\173\104\172\105\175\106\uffd5\001\002\000\024\060" +
                            "\uffd2\061\uffd2\062\uffd2\063\uffd2\065\uffd2\066\uffd2\104\uffd2" +
                            "\105\uffd2\106\uffd2\001\002\000\024\060\uffd1\061\uffd1\062" +
                            "\uffd1\063\uffd1\065\uffd1\066\uffd1\104\uffd1\105\uffd1\106\uffd1" +
                            "\001\002\000\014\002\uffed\066\uffed\101\uffed\104\uffed\106" +
                            "\uffed\001\002\000\016\060\uffd7\061\uffd7\062\uffd7\063\uffd7" +
                            "\065\uffd7\106\uffd7\001\002\000\004\030\326\001\002\000" +
                            "\010\037\uffdb\102\uffdb\103\uffdb\001\002\000\020\060\uffd8" +
                            "\061\uffd8\062\uffd8\063\uffd8\065\uffd8\104\325\106\uffd8\001" +
                            "\002\000\016\060\212\061\206\062\213\063\205\065\210" +
                            "\106\207\001\002\000\006\036\uffc7\066\uffc7\001\002\000" +
                            "\006\036\323\066\uffcd\001\002\000\010\037\uffda\102\uffda" +
                            "\103\uffda\001\002\000\010\037\uffd9\102\uffd9\103\uffd9\001" +
                            "\002\000\004\034\234\001\002\000\004\066\320\001\002" +
                            "\000\006\036\uffcb\066\uffcb\001\002\000\006\036\uffc9\066" +
                            "\uffc9\001\002\000\014\060\212\061\206\062\213\063\205" +
                            "\065\210\001\002\000\004\066\ufff6\001\002\000\004\066" +
                            "\214\001\002\000\006\036\uffca\066\uffca\001\002\000\006" +
                            "\036\uffc8\066\uffc8\001\002\000\004\030\215\001\002\000" +
                            "\014\031\217\060\212\061\206\062\213\063\205\001\002" +
                            "\000\002\001\002\000\006\004\ufff8\034\ufff8\001\002\000" +
                            "\004\066\230\001\002\000\006\005\223\031\224\001\002" +
                            "\000\006\005\ufff4\031\ufff4\001\002\000\012\060\212\061" +
                            "\206\062\213\063\205\001\002\000\006\004\ufff7\034\ufff7" +
                            "\001\002\000\004\066\227\001\002\000\006\005\ufff3\031" +
                            "\ufff3\001\002\000\006\005\uffc3\031\uffc3\001\002\000\006" +
                            "\005\ufff2\031\ufff2\001\002\000\006\005\uffc2\031\uffc2\001" +
                            "\002\000\004\034\234\001\002\000\004\066\ufff5\001\002" +
                            "\000\020\030\uffc4\035\uffc4\046\uffc4\050\uffc4\052\uffc4\053" +
                            "\uffc4\066\uffc4\001\002\000\010\037\uffce\102\uffce\103\uffce" +
                            "\001\002\000\020\030\247\035\244\046\250\050\246\052" +
                            "\243\053\240\066\242\001\002\000\020\030\uffc5\035\uffc5" +
                            "\046\uffc5\050\uffc5\052\uffc5\053\uffc5\066\uffc5\001\002\000" +
                            "\032\011\043\020\056\030\057\034\053\051\050\066\052" +
                            "\067\044\070\054\071\055\073\047\074\046\075\045\001" +
                            "\002\000\020\030\uffc0\035\uffc0\046\uffc0\050\uffc0\052\uffc0" +
                            "\053\uffc0\066\uffc0\001\002\000\030\006\uffb5\012\uffb5\030" +
                            "\uffe9\035\uffe9\036\uffb5\040\016\046\uffe9\050\uffe9\052\uffe9" +
                            "\053\uffe9\066\uffe9\001\002\000\032\011\043\020\056\030" +
                            "\057\034\053\051\050\066\052\067\044\070\054\071\055" +
                            "\073\047\074\046\075\045\001\002\000\030\030\uffc6\035" +
                            "\uffc6\037\uffc6\046\uffc6\047\uffc6\050\uffc6\052\uffc6\053\uffc6" +
                            "\066\uffc6\102\uffc6\103\uffc6\001\002\000\010\006\263\012" +
                            "\303\036\262\001\002\000\004\030\277\001\002\000\006" +
                            "\030\247\066\257\001\002\000\004\030\251\001\002\000" +
                            "\032\011\043\020\056\030\057\034\053\051\050\066\052" +
                            "\067\044\070\054\071\055\073\047\074\046\075\045\001" +
                            "\002\000\044\006\103\010\107\017\074\020\110\022\105" +
                            "\023\077\024\100\026\072\027\073\031\253\036\076\040" +
                            "\102\041\111\042\104\043\106\044\075\045\101\001\002" +
                            "\000\004\034\234\001\002\000\022\030\uffba\035\uffba\046" +
                            "\uffba\047\255\050\uffba\052\uffba\053\uffba\066\uffba\001\002" +
                            "\000\004\034\234\001\002\000\020\030\uffbb\035\uffbb\046" +
                            "\uffbb\050\uffbb\052\uffbb\053\uffbb\066\uffbb\001\002\000\012" +
                            "\006\uffb5\030\273\031\uffb5\036\uffb5\001\002\000\010\006" +
                            "\263\031\261\036\262\001\002\000\012\006\uffb3\012\uffb3" +
                            "\031\uffb3\036\uffb3\001\002\000\032\011\043\020\056\030" +
                            "\057\034\053\051\050\066\052\067\044\070\054\071\055" +
                            "\073\047\074\046\075\045\001\002\000\004\066\264\001" +
                            "\002\000\014\006\uffb2\012\uffb2\030\265\031\uffb2\036\uffb2" +
                            "\001\002\000\034\011\043\020\056\030\057\031\266\034" +
                            "\053\051\050\066\052\067\044\070\054\071\055\073\047" +
                            "\074\046\075\045\001\002\000\012\006\uffb0\012\uffb0\031" +
                            "\uffb0\036\uffb0\001\002\000\006\005\067\031\270\001\002" +
                            "\000\012\006\uffb1\012\uffb1\031\uffb1\036\uffb1\001\002\000" +
                            "\044\006\103\010\107\017\074\020\110\022\105\023\077" +
                            "\024\100\026\072\027\073\036\076\037\272\040\102\041" +
                            "\111\042\104\043\106\044\075\045\101\001\002\000\012" +
                            "\006\uffb4\012\uffb4\031\uffb4\036\uffb4\001\002\000\034\011" +
                            "\043\020\056\030\057\031\274\034\053\051\050\066\052" +
                            "\067\044\070\054\071\055\073\047\074\046\075\045\001" +
                            "\002\000\010\006\uffae\031\uffae\036\uffae\001\002\000\006" +
                            "\005\067\031\276\001\002\000\010\006\uffaf\031\uffaf\036" +
                            "\uffaf\001\002\000\032\011\043\020\056\030\057\034\053" +
                            "\051\050\066\052\067\044\070\054\071\055\073\047\074" +
                            "\046\075\045\001\002\000\044\006\103\010\107\017\074" +
                            "\020\110\022\105\023\077\024\100\026\072\027\073\031" +
                            "\301\036\076\040\102\041\111\042\104\043\106\044\075" +
                            "\045\101\001\002\000\004\034\234\001\002\000\020\030" +
                            "\uffb9\035\uffb9\046\uffb9\050\uffb9\052\uffb9\053\uffb9\066\uffb9" +
                            "\001\002\000\032\011\043\020\056\030\057\034\053\051" +
                            "\050\066\052\067\044\070\054\071\055\073\047\074\046" +
                            "\075\045\001\002\000\044\004\305\006\103\010\107\017" +
                            "\074\020\110\022\105\023\077\024\100\026\072\027\073" +
                            "\036\076\040\102\041\111\042\104\043\106\044\075\045" +
                            "\101\001\002\000\020\030\uffbf\035\uffbf\046\uffbf\050\uffbf" +
                            "\052\uffbf\053\uffbf\066\uffbf\001\002\000\044\004\307\006" +
                            "\103\010\107\017\074\020\110\022\105\023\077\024\100" +
                            "\026\072\027\073\036\076\040\102\041\111\042\104\043" +
                            "\106\044\075\045\101\001\002\000\020\030\uffbc\035\uffbc" +
                            "\046\uffbc\050\uffbc\052\uffbc\053\uffbc\066\uffbc\001\002\000" +
                            "\034\011\043\020\056\030\057\031\311\034\053\051\050" +
                            "\066\052\067\044\070\054\071\055\073\047\074\046\075" +
                            "\045\001\002\000\012\004\315\006\uffae\012\uffae\036\uffae" +
                            "\001\002\000\006\005\067\031\313\001\002\000\012\004" +
                            "\314\006\uffaf\012\uffaf\036\uffaf\001\002\000\020\030\uffbe" +
                            "\035\uffbe\046\uffbe\050\uffbe\052\uffbe\053\uffbe\066\uffbe\001" +
                            "\002\000\020\030\uffbd\035\uffbd\046\uffbd\050\uffbd\052\uffbd" +
                            "\053\uffbd\066\uffbd\001\002\000\044\004\317\006\103\010" +
                            "\107\017\074\020\110\022\105\023\077\024\100\026\072" +
                            "\027\073\036\076\040\102\041\111\042\104\043\106\044" +
                            "\075\045\101\001\002\000\020\030\uffb8\035\uffb8\046\uffb8" +
                            "\050\uffb8\052\uffb8\053\uffb8\066\uffb8\001\002\000\004\004" +
                            "\321\001\002\000\010\037\uffd0\102\uffd0\103\uffd0\001\002" +
                            "\000\010\037\uffcf\102\uffcf\103\uffcf\001\002\000\004\037" +
                            "\324\001\002\000\004\066\uffcc\001\002\000\016\060\uffd6" +
                            "\061\uffd6\062\uffd6\063\uffd6\065\uffd6\106\uffd6\001\002\000" +
                            "\014\031\327\060\212\061\206\062\213\063\205\001\002" +
                            "\000\004\034\234\001\002\000\006\005\223\031\331\001" +
                            "\002\000\004\034\234\001\002\000\010\037\uffd3\102\uffd3" +
                            "\103\uffd3\001\002\000\010\037\uffd4\102\uffd4\103\uffd4\001" +
                            "\002\000\006\036\uffe1\100\335\001\002\000\004\066\024" +
                            "\001\002\000\006\005\033\036\uffe0\001\002\000\006\005" +
                            "\033\036\uffdf\001\002\000\006\036\341\076\342\001\002" +
                            "\000\016\037\ufff9\060\212\061\206\062\213\063\205\065" +
                            "\210\001\002\000\004\066\024\001\002\000\006\005\033" +
                            "\036\344\001\002\000\016\037\ufff9\060\212\061\206\062" +
                            "\213\063\205\065\210\001\002\000\004\004\350\001\002" +
                            "\000\004\037\347\001\002\000\014\002\ufffb\066\ufffb\101" +
                            "\ufffb\104\ufffb\106\ufffb\001\002\000\016\037\ufff9\060\212" +
                            "\061\206\062\213\063\205\065\210\001\002\000\004\037" +
                            "\ufffa\001\002\000\004\037\353\001\002\000\014\002\ufffc" +
                            "\066\ufffc\101\ufffc\104\ufffc\106\ufffc\001\002\000\014\002" +
                            "\001\066\001\101\001\104\001\106\001\001\002\000\014" +
                            "\002\uffff\066\uffff\101\uffff\104\uffff\106\uffff\001\002\000" +
                            "\004\002\000\001\002" });

    /** Access to parse-action table. */
    public short[][] action_table() {return _action_table;}

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[] {
                    "\000\354\000\012\015\003\016\004\017\006\026\007\001" +
                            "\001\000\010\016\353\017\354\026\007\001\001\000\002" +
                            "\001\001\000\006\005\337\011\013\001\001\000\002\001" +
                            "\001\000\006\005\012\011\013\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\027\161\001\001\000\004\010" +
                            "\040\001\001\000\002\001\001\000\006\031\016\032\020" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\006\023\022\033\024\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\023\026\001" +
                            "\001\000\002\001\001\000\006\022\031\023\030\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\023\034\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\032\037" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\013\050\001\001\000\004\013\156\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\011\146\001\001\000\002\001\001" +
                            "\000\002\001\001\000\006\006\143\013\064\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\013\142\001\001" +
                            "\000\004\013\057\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\013\140\001\001\000\006\006\065\013\064" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\013\070\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\013\137\001\001\000\004\013\136\001" +
                            "\001\000\004\013\135\001\001\000\004\013\134\001\001" +
                            "\000\004\013\132\001\001\000\004\013\131\001\001\000" +
                            "\004\013\130\001\001\000\004\013\127\001\001\000\004" +
                            "\013\126\001\001\000\002\001\001\000\004\013\120\001" +
                            "\001\000\004\013\117\001\001\000\004\013\116\001\001" +
                            "\000\004\013\113\001\001\000\004\013\112\001\001\000" +
                            "\004\013\111\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\013\115\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\006\006\124\013\064\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\013\154\001\001\000\006\006\152\013\064" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\006\022\336\023\030\001\001\000\004\023\333\001" +
                            "\001\000\002\001\001\000\004\030\163\001\001\000\006" +
                            "\035\164\036\165\001\001\000\002\001\001\000\006\037" +
                            "\173\040\175\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\020\021\202\024\210" +
                            "\041\200\042\201\043\177\044\203\045\176\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\002\321\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\014\021\231\024\210" +
                            "\043\177\044\232\045\176\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\016\007\220\011\215\025\221\043\177\044" +
                            "\217\045\176\001\001\000\004\010\230\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\014\011\224\025\225\043\177\044\217\045\176" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\002\234\001\001\000\002\001\001\000\004\003" +
                            "\235\001\001\000\002\001\001\000\012\004\236\005\240" +
                            "\011\013\014\244\001\001\000\002\001\001\000\004\013" +
                            "\315\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\013\305\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\014\257\001\001\000\002\001\001" +
                            "\000\004\013\251\001\001\000\002\001\001\000\004\002" +
                            "\253\001\001\000\002\001\001\000\004\002\255\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\013\270\001\001\000\002\001\001" +
                            "\000\002\001\001\000\006\006\266\013\064\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\006\006\274\013\064\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\013\277\001\001\000\002\001\001\000\004\002" +
                            "\301\001\001\000\002\001\001\000\004\013\303\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\006\006\311\013\064\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
                            "\007\327\011\215\025\221\043\177\044\217\045\176\001" +
                            "\001\000\004\002\332\001\001\000\002\001\001\000\004" +
                            "\002\331\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\006\022\335\023\030\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
                            "\351\021\344\024\210\043\177\044\232\045\176\001\001" +
                            "\000\006\022\342\023\030\001\001\000\002\001\001\000" +
                            "\016\020\345\021\344\024\210\043\177\044\232\045\176" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\016\020\350\021\344\024\210\043\177\044\232" +
                            "\045\176\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001" });

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {return _reduce_table;}

    /** Instance of action encapsulation class. */
    protected CUP$Parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions()
    {
        action_obj = new CUP$Parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int                        act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack            stack,
            int                        top)
            throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {return 0;}
    /** Indicates start production. */
    public int start_production() {return 1;}

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {return 0;}

    /** <code>error</code> Symbol index. */
    public int error_sym() {return 1;}


    /** User initialization code. */
    public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

        ComplexSymbolFactory f = new ComplexSymbolFactory();
        symbolFactory = f;
        File file = new File(this.name);
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
        lexer = new Lexer(f, fis);

    }

    /** Scan to get the next Symbol. */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception
    {
//@@CUPDBG2
        return lexer.next_token();
    }

//@@CUPDBG0

    protected Lexer lexer;
    public String name;
    //public Block block;
    //public boolean resolve, checkType;
    //public double
    //    resolveTimeMs,
    //    checkTypeTimeMs,
    //    allocateMemoryTimeMs,
    //    getCodeTimeMs;
    //public Fragment fragment;
    public Parser(String name) {
        this();
        this.name = name;
    }


    /** Cup generated class to encapsulate user supplied action code.*/
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {
        private final Parser parser;

        /** Constructor */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /** Method 0 with the actual generated action code for actions 0 to 300. */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
                int                        CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack            CUP$Parser$stack,
                int                        CUP$Parser$top)
                throws java.lang.Exception
        {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num)
            {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // Program ::= Program InterfaceDeclaration
                {
                    void RESULT =null;
                    Location programxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location programxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void program = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    Location interfaceDeclarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location interfaceDeclarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void interfaceDeclaration = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG3

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // $START ::= Program EOF
                {
                    Object RESULT =null;
                    Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void start_val = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // Program ::= Program ClassDeclaration
                {
                    void RESULT =null;
                    Location programxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location programxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void program = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    Location classDeclarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location classDeclarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void classDeclaration = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG4

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // Program ::= InterfaceDeclaration
                {
                    void RESULT =null;
                    Location interfaceDeclarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location interfaceDeclarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void interfaceDeclaration = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG5

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // Program ::= ClassDeclaration
                {
                    void RESULT =null;
                    Location classDeclarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location classDeclarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void classDeclaration = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG6

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // InterfaceDeclaration ::= UL_Interface Declaration UL_Crochet_Ouvrant MethodSignatures UL_Crochet_Fermant
                {
                    void RESULT =null;
                    Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    Instruction declaration = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location signaturesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location signaturesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void signatures = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG7

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceDeclaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // InterfaceDeclaration ::= UL_Interface Declaration UL_Extends Instantiations UL_Crochet_Ouvrant MethodSignatures UL_Crochet_Fermant
                {
                    void RESULT =null;
                    Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
                    Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
                    Instruction declaration = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
                    Location instantiationsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location instantiationsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    void instantiations = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location signaturesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location signaturesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void signatures = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG8

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceDeclaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // MethodSignatures ::= MethodSignature UL_Point_Virgule MethodSignatures
                {
                    void RESULT =null;
                    Location methodeSignaturexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location methodeSignaturexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    void methodeSignature = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location methodeSignaturesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location methodeSignaturesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void methodeSignatures = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG9

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSignatures",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // MethodSignatures ::=
                {
                    void RESULT =null;
                    //@@CUPDBG10

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSignatures",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // MethodSignature ::= NullableType UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante
                {
                    void RESULT =null;
                    Location nullablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location nullablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    void nullable = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    //@@CUPDBG11

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSignature",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // MethodSignature ::= NullableType UL_Identificateur UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante
                {
                    void RESULT =null;
                    Location nullablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
                    Location nullablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
                    void nullable = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG12

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodSignature",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // NullableType ::= UL_Type_Vide
                {
                    void RESULT =null;
                    //@@CUPDBG13

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NullableType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // NullableType ::= ClassType
                {
                    void RESULT =null;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void type = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG14

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NullableType",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // Parameters ::= Parameter
                {
                    List<ParameterDeclaration> RESULT =null;
                    Location parameterxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location parameterxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void parameter = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG15

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // Parameters ::= Parameters UL_Virgule Parameter
                {
                    List<ParameterDeclaration> RESULT =null;
                    Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location parameterxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location parameterxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void parameter = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG16

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // Parameter ::= ClassType UL_Identificateur
                {
                    void RESULT =null;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void type = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG17

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameter",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // Instantiations ::= Instantiation
                {
                    void RESULT =null;
                    Location instantiationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location instantiationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void instantiation = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG18

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instantiations",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // Instantiations ::= Instantiations UL_Virgule Instantiation
                {
                    void RESULT =null;
                    Location instantiationsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location instantiationsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    void instantiations = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location instantiationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location instantiationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void instantiation = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG19

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instantiations",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // Instantiation ::= UL_Identificateur
                {
                    void RESULT =null;
                    //@@CUPDBG20

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instantiation",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // Instantiation ::= UL_Identificateur UL_Inferieur Instantiations UL_Superieur
                {
                    void RESULT =null;
                    Location instantiationsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location instantiationsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void instantiations = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG21

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instantiation",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // ClassDeclaration ::= ClassModifier Declaration Extension UL_Crochet_Ouvrant Definitions UL_Crochet_Fermant
                {
                    void RESULT =null;
                    Location modifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
                    Location modifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
                    void modifier = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
                    Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
                    Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
                    Instruction declaration = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    Location extensionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location extensionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    void extension = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location definitionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location definitionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void definitions = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG22

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // ClassModifier ::= UL_Final
                {
                    void RESULT =null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // ClassModifier ::= UL_Abstract
                {
                    void RESULT =null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // ClassModifier ::=
                {
                    void RESULT =null;
                    //@@CUPDBG23

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // Declaration ::= UL_Identificateur
                {
                    Instruction RESULT =null;
                    //@@CUPDBG24

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // Declaration ::= UL_Identificateur UL_Inferieur GenericTypes UL_Superieur
                {
                    Instruction RESULT =null;
                    Location genericsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location genericsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void generics = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG25

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // GenericTypes ::= GenericType
                {
                    void RESULT =null;
                    //@@CUPDBG26

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("GenericTypes",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // GenericTypes ::= GenericTypes UL_Virgule GenericType
                {
                    void RESULT =null;
                    Location genericsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location genericsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    void generics = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location genericxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location genericxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void generic = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG27

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("GenericTypes",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // GenericType ::= UL_Identificateur
                {
                    void RESULT =null;
                    //@@CUPDBG28

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("GenericType",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // GenericType ::= UL_Identificateur UL_Extends GenericInstantiations
                {
                    void RESULT =null;
                    Location genericInstantiationsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location genericInstantiationsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void genericInstantiations = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG29

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("GenericType",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // GenericInstantiations ::= Instantiation
                {
                    void RESULT =null;
                    //@@CUPDBG30

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("GenericInstantiations",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // GenericInstantiations ::= GenericInstantiations UL_Esperluette Instantiation
                {
                    void RESULT =null;
                    Location genericInstantiationsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location genericInstantiationsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    void genericInstantiations = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location instantiationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location instantiationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void instantiation = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG31

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("GenericInstantiations",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // Extension ::= UL_Extends Instantiation
                {
                    void RESULT =null;
                    Location instantiationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location instantiationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void instantiation = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG32

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Extension",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // Extension ::= UL_Extends Instantiation UL_Implements Instantiations
                {
                    void RESULT =null;
                    Location instantiationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location instantiationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    void instantiation = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location instantiationsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location instantiationsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void instantiations = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG33

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Extension",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // Extension ::= UL_Implements Instantiations
                {
                    void RESULT =null;
                    Location instantiationsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location instantiationsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void instantiations = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG34

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Extension",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // Extension ::=
                {
                    void RESULT =null;
                    //@@CUPDBG35

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Extension",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // Definitions ::= Definitions Definition
                {
                    void RESULT =null;
                    Location definitionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location definitionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void definitions = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    Location definitionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location definitionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void definition = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG36

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Definitions",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // Definitions ::=
                {
                    void RESULT =null;
                    //@@CUPDBG37

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Definitions",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // Definition ::= AccessModifier ClassConstructor
                {
                    void RESULT =null;
                    Location accessxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location accessxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void access = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    Location constructorxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location constructorxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void constructor = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG38

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Definition",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // Definition ::= AccessModifier DefinitionModifier AttributeDefinition
                {
                    void RESULT =null;
                    Location accessxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location accessxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    void access = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location modifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location modifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void modifier = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    Location attributeDefinitionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location attributeDefinitionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void attributeDefinition = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG39

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Definition",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // Definition ::= AccessModifier DefinitionModifier MethodDefinition
                {
                    void RESULT =null;
                    Location accessxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location accessxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    void access = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location modifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location modifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void modifier = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    Location methodDefinitionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location methodDefinitionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void methodDefinition = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG40

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Definition",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // DefinitionModifier ::= UL_Static
                {
                    void RESULT =null;
                    //@@CUPDBG41

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionModifier",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // DefinitionModifier ::= UL_Final
                {
                    void RESULT =null;
                    //@@CUPDBG42

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionModifier",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // DefinitionModifier ::= UL_Static UL_Final
                {
                    void RESULT =null;
                    //@@CUPDBG43

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionModifier",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // DefinitionModifier ::=
                {
                    void RESULT =null;
                    //@@CUPDBG44

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionModifier",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // ClassConstructor ::= UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante Bloc
                {
                    void RESULT =null;
                    Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Block body = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG45

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassConstructor",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // ClassConstructor ::= UL_Identificateur UL_Parenthese_Ouvrante Parameters UL_Parenthese_Fermante Bloc
                {
                    void RESULT =null;
                    Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Block body = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG46

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassConstructor",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // AccessModifier ::= UL_Public
                {
                    void RESULT =null;
                    //@@CUPDBG47

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessModifier",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // AccessModifier ::= UL_Private
                {
                    void RESULT =null;
                    //@@CUPDBG48

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessModifier",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // AttributeDefinition ::= ClassType UL_Identificateur UL_Point_Virgule
                {
                    void RESULT =null;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    void type = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    //@@CUPDBG49

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("AttributeDefinition",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // MethodDefinition ::= MethodSignature Bloc
                {
                    void RESULT =null;
                    Location methodSignaturexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location methodSignaturexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void methodSignature = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Block body = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG50

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDefinition",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // MethodDefinition ::= UL_Abstract MethodSignature Bloc
                {
                    void RESULT =null;
                    Location methodSignaturexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location methodSignaturexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    void methodSignature = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Block body = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG51

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDefinition",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // ClassType ::= NonArrayType
                {
                    void RESULT =null;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void type = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG52

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassType",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // ClassType ::= NonArrayType UL_Crochet_Ouvrant UL_Crochet_Fermant
                {
                    void RESULT =null;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    void type = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    //@@CUPDBG53

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassType",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // NonArrayType ::= UL_Type_Entier
                {
                    void RESULT =null;
                    //@@CUPDBG54

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonArrayType",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // NonArrayType ::= UL_Type_Booleen
                {
                    void RESULT =null;
                    //@@CUPDBG55

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonArrayType",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // NonArrayType ::= UL_Type_Caractere
                {
                    void RESULT =null;
                    //@@CUPDBG56

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonArrayType",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // NonArrayType ::= UL_Type_Chaine
                {
                    void RESULT =null;
                    //@@CUPDBG57

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonArrayType",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // NonArrayType ::= Insantiation
                {
                    void RESULT =null;
                    Location instationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location instationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    void instation = (void)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG58

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonArrayType",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // Bloc ::= UL_Accolade_Ouvrante Instructions UL_Accolade_Fermante
                {
                    Block RESULT =null;
                    Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG59
                    /* RESULT = new Block(instructions); */
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloc",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // Instructions ::= Instructions Instruction
                {
                    List<Instruction> RESULT =null;
                    Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    Location instructionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location instructionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG60

                    instructions.add(instruction);
                    RESULT = instructions;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // Instructions ::=
                {
                    List<Instruction> RESULT =null;
                    //@@CUPDBG61
                    RESULT = new LinkedList<Instruction>();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // Parameters ::= Parameters UL_Virgule Type UL_Identificateur
                {
                    List<ParameterDeclaration> RESULT =null;
                    Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    String identifiant = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG62

                    Type _type = identifiant.getRight();
                    if (_type == null) {
                        _type = type;
                    } else {
                        _type = ((PartialType)_type).complete( type );
                    }
                    parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
                    RESULT = parameters;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // Parameters ::= Type Identifiant
                {
                    List<ParameterDeclaration> RESULT =null;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG63

                    List<ParameterDeclaration> _parameters = new LinkedList<ParameterDeclaration>();
                    Type _type = identifiant.getRight();
                    if (_type == null) {
                        _type = type;
                    } else {
                        _type = ((PartialType)_type).complete( type );
                    }
                    _parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
                    RESULT = _parameters;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // Declaration ::= Type Identifiant UL_Egal Expression UL_Point_Virgule
                {
                    Instruction RESULT =null;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
                    Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG64

                    Type _type = identifiant.getRight();
                    if (_type == null) {
                        _type = type;
                    } else {
                        _type = ((PartialType)_type).complete( type );
                    }
                    RESULT = new VariableDeclaration( identifiant.getLeft(), _type, valeur);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // Instruction ::= Declaration
                {
                    Instruction RESULT =null;
                    Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Instruction declaration = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG65

                    RESULT = declaration;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // Instruction ::= Affectable UL_Egal Expression UL_Point_Virgule
                {
                    Instruction RESULT =null;
                    Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG66

                    RESULT = new Assignment( affectable, expression);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // Instruction ::= UL_Identificateur UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante UL_Point_Virgule
                {
                    Instruction RESULT =null;
                    Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
                    Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
                    String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    //@@CUPDBG67

                    RESULT = new FunctionCall( nom, parametres );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // Instruction ::= UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante UL_Point_Virgule
                {
                    Instruction RESULT =null;
                    Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    //@@CUPDBG68

                    List<Expression> _parametres = new LinkedList<Expression>();
                    RESULT = new FunctionCall( nom, _parametres );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // Instruction ::= UL_Afficher Expression UL_Point_Virgule
                {
                    Instruction RESULT =null;
                    Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG69

                    RESULT = new Printer( expression );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // Instruction ::= UL_Si UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Bloc UL_Sinon Bloc
                {
                    Instruction RESULT =null;
                    Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
                    Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
                    Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Block alors = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Block sinon = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG70

                    RESULT = new Conditional( condition, alors, sinon);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // Instruction ::= UL_Si UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Bloc
                {
                    Instruction RESULT =null;
                    Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Block alors = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG71

                    RESULT = new Conditional( condition, alors);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // Instruction ::= UL_Tant_Que UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Bloc
                {
                    Instruction RESULT =null;
                    Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG72

                    RESULT = new Iteration( condition, corps);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // Instruction ::= UL_Retour Expression UL_Point_Virgule
                {
                    Instruction RESULT =null;
                    Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG73

                    RESULT = new Return( expression);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // Expressions ::= Expressions UL_Virgule Expression
                {
                    List<Expression> RESULT =null;
                    Location expressionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location expressionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    List<Expression> expressions = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG74

                    expressions.add( expression );
                    RESULT = expressions;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // Expressions ::= Expression
                {
                    List<Expression> RESULT =null;
                    Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG75

                    List<Expression> _expressions = new LinkedList<Expression>();
                    _expressions.add( expression );
                    RESULT = _expressions;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // Affectable ::= UL_Identificateur
                {
                    AssignableExpression RESULT =null;
                    Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG76

                    RESULT = new VariableAssignment( nom );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // Affectable ::= Affectable UL_Crochet_Ouvrant Expression UL_Crochet_Fermant
                {
                    AssignableExpression RESULT =null;
                    Location tableauxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location tableauxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    AssignableExpression tableau = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG77

                    RESULT = new ArrayAssignment( tableau, indice);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // Affectable ::= UL_Parenthese_Ouvrante Affectable UL_Parenthese_Fermante
                {
                    AssignableExpression RESULT =null;
                    Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG78

                    RESULT = affectable;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // Affectable ::= Affectable UL_Point UL_Identificateur
                {
                    AssignableExpression RESULT =null;
                    Location enregistrementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location enregistrementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    AssignableExpression enregistrement = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG79

                    RESULT = new FieldAssignment( enregistrement, etiquette);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // Affectable ::= Affectable UL_Point UL_Identificateur UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante
                {
                    AssignableExpression RESULT =null;
                    Location enregistrementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
                    Location enregistrementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
                    AssignableExpression enregistrement = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
                    Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG80

                    // TODO

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // Affectable ::= Affectable UL_Point UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante
                {
                    AssignableExpression RESULT =null;
                    Location enregistrementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
                    Location enregistrementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
                    AssignableExpression enregistrement = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    //@@CUPDBG81

                    // TODO

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // Affectable ::= UL_Identificateur UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante
                {
                    AssignableExpression RESULT =null;
                    Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG82

                    // TODO

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // Affectable ::= UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante
                {
                    AssignableExpression RESULT =null;
                    Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    //@@CUPDBG83

                    // TODO

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // Expression ::= Expression UL_Double_Egal Expression
                {
                    Expression RESULT =null;
                    Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG84

                    RESULT = new BinaryExpression( gauche, BinaryOperator.Equals, droite);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // Expression ::= Expression UL_Exclamation_Egal Expression
                {
                    Expression RESULT =null;
                    Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG85

                    RESULT = new BinaryExpression( gauche, BinaryOperator.Different, droite);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // Expression ::= Expression UL_Inferieur Expression
                {
                    Expression RESULT =null;
                    Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG86

                    RESULT = new BinaryExpression( gauche, BinaryOperator.Lesser, droite);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 87: // Expression ::= Expression UL_Superieur Expression
                {
                    Expression RESULT =null;
                    Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG87

                    RESULT = new BinaryExpression( gauche, BinaryOperator.Greater, droite);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 88: // Expression ::= Expression UL_Inferieur_Egal Expression
                {
                    Expression RESULT =null;
                    Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG88

                    RESULT = new BinaryExpression( gauche, BinaryOperator.LesserOrEqual, droite);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 89: // Expression ::= Expression UL_Superieur_Egal Expression
                {
                    Expression RESULT =null;
                    Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG89

                    RESULT = new BinaryExpression( gauche, BinaryOperator.GreaterOrEqual, droite);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 90: // Expression ::= Expression UL_Double_Barre Expression
                {
                    Expression RESULT =null;
                    Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG90

                    RESULT = new BinaryExpression( gauche, BinaryOperator.Or, droite);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 91: // Expression ::= Expression UL_Double_Esperluette Expression
                {
                    Expression RESULT =null;
                    Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG91

                    RESULT = new BinaryExpression( gauche, BinaryOperator.And, droite);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 92: // Expression ::= Expression UL_Plus Expression
                {
                    Expression RESULT =null;
                    Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG92

                    RESULT = new BinaryExpression( gauche, BinaryOperator.Add, droite);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 93: // Expression ::= Expression UL_Moins Expression
                {
                    Expression RESULT =null;
                    Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG93

                    RESULT = new BinaryExpression( gauche, BinaryOperator.Substract, droite);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 94: // Expression ::= Expression UL_Asterisque Expression
                {
                    Expression RESULT =null;
                    Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG94

                    RESULT = new BinaryExpression( gauche, BinaryOperator.Multiply, droite);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 95: // Expression ::= Expression UL_Oblique Expression
                {
                    Expression RESULT =null;
                    Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG95

                    RESULT = new BinaryExpression( gauche, BinaryOperator.Divide, droite);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 96: // Expression ::= Expression UL_Pour_Cent Expression
                {
                    Expression RESULT =null;
                    Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG96

                    RESULT = new BinaryExpression( gauche, BinaryOperator.Modulo, droite);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 97: // Expression ::= UL_Moins Expression
                {
                    Expression RESULT =null;
                    Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG97

                    RESULT = new UnaryExpression( UnaryOperator.Opposite, expression);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 98: // Expression ::= UL_Point_Exclamation Expression
                {
                    Expression RESULT =null;
                    Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG98

                    RESULT = new UnaryExpression( UnaryOperator.Negate, expression);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 99: // Expression ::= Expression UL_Crochet_Ouvrant Expression UL_Crochet_Fermant
                {
                    Expression RESULT =null;
                    Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG99

                    RESULT = new ArrayAccess( expression, indice );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 100: // Expression ::= Expression UL_Point UL_Identificateur
                {
                    Expression RESULT =null;
                    Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG100

                    RESULT = new FieldAccess( expression, etiquette );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 101: // Expression ::= Expression UL_Point UL_Identificateur UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante
                {
                    Expression RESULT =null;
                    Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
                    Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
                    Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
                    Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG101

                    // TODO

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 102: // Expression ::= Expression UL_Point UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante
                {
                    Expression RESULT =null;
                    Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
                    Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
                    Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    Location etiquettexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location etiquettexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    String etiquette = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    //@@CUPDBG102

                    // TODO

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 103: // Expression ::= Expression UL_Point_Interrogation Expression UL_Deux_Points Expression
                {
                    Expression RESULT =null;
                    Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
                    Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
                    Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
                    Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Expression alors = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression sinon = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG103

                    RESULT = new ConditionalExpression( condition, alors, sinon);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 104: // Expression ::= UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante
                {
                    Expression RESULT =null;
                    Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG104

                    RESULT = expression;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 105: // Expression ::= UL_Parenthese_Ouvrante UL_Identificateur UL_Parenthese_Fermante Expression
                {
                    Expression RESULT =null;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG105

                    RESULT = new TypeConversion( expression, type);

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 106: // Expression ::= UL_Accolade_Ouvrante Expressions UL_Accolade_Fermante
                {
                    Expression RESULT =null;
                    Location expressionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location expressionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    List<Expression> expressions = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG106

                    RESULT = new Sequence( expressions );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 107: // Expression ::= UL_Identificateur
                {
                    Expression RESULT =null;
                    Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG107

                    RESULT = new IdentifierAccess( nom );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 108: // Expression ::= UL_Identificateur UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante
                {
                    Expression RESULT =null;
                    Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG108

                    RESULT = new FunctionCall( nom, parametres );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 109: // Expression ::= UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante
                {
                    Expression RESULT =null;
                    Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    //@@CUPDBG109

                    List<Expression> _parametres = new LinkedList<Expression>();
                    RESULT = new FunctionCall( nom, _parametres );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 110: // Expression ::= UL_Nombre_Entier
                {
                    Expression RESULT =null;
                    Location entierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location entierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    String entier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG110

                    RESULT = new IntegerValue( entier );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 111: // Expression ::= UL_Vrai
                {
                    Expression RESULT =null;
                    //@@CUPDBG111

                    RESULT = BooleanValue.True;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 112: // Expression ::= UL_Faux
                {
                    Expression RESULT =null;
                    //@@CUPDBG112

                    RESULT = BooleanValue.False;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 113: // Expression ::= UL_Nul
                {
                    Expression RESULT =null;
                    //@@CUPDBG113

                    RESULT = NullValue.Null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 114: // Expression ::= UL_Caractere
                {
                    Expression RESULT =null;
                    Location caracterexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location caracterexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    String caractere = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG114

                    RESULT = new CharacterValue( caractere );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 115: // Expression ::= UL_Chaine
                {
                    Expression RESULT =null;
                    Location chainexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
                    Location chainexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
                    String chaine = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    //@@CUPDBG115

                    RESULT = new StringValue( chaine );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 116: // Expression ::= UL_Nouveau Type UL_Crochet_Ouvrant Expression UL_Crochet_Fermant
                {
                    Expression RESULT =null;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location taillexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location taillexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    Expression taille = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG116

                    RESULT = new ArrayAllocation( type, taille );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 117: // Expression ::= UL_Nouveau Type UL_Parenthese_Ouvrante UL_Parenthese_Fermante
                {
                    Expression RESULT =null;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
                    Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
                    //@@CUPDBG117

                    RESULT = new PointerAllocation( type );

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 118: // Expression ::= UL_Nouveau Type UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante
                {
                    Expression RESULT =null;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
                    Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
                    Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
                    Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
                    List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
                    //@@CUPDBG118
                    /* TODO */
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

            }
        } /* end of method */

        /** Method splitting the generated action code into several parts. */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
                int                        CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack            CUP$Parser$stack,
                int                        CUP$Parser$top)
                throws java.lang.Exception
        {
            return CUP$Parser$do_action_part00000000(
                    CUP$Parser$act_num,
                    CUP$Parser$parser,
                    CUP$Parser$stack,
                    CUP$Parser$top);
        }
    }

}